/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: payload/v1/user/get.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../entity/user";
import * as pb_1 from "google-protobuf";
export class GetUserResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: dependency_1.User;
        scopes?: dependency_1.UserScope[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
            if ("scopes" in data && data.scopes != undefined) {
                this.scopes = data.scopes;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, dependency_1.User, 1) as dependency_1.User;
    }
    set user(value: dependency_1.User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get hasUser() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get scopes() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.UserScope, 2) as dependency_1.UserScope[];
    }
    set scopes(value: dependency_1.UserScope[]) {
        pb_1.Message.setRepeatedWrapperField(this, 2, value);
    }
    static fromObject(data: {
        user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
        scopes?: ReturnType<typeof dependency_1.UserScope.prototype.toObject>[];
    }): GetUserResponse {
        const message = new GetUserResponse({});
        if (data.user != null) {
            message.user = dependency_1.User.fromObject(data.user);
        }
        if (data.scopes != null) {
            message.scopes = data.scopes.map(item => dependency_1.UserScope.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof dependency_1.User.prototype.toObject>;
            scopes?: ReturnType<typeof dependency_1.UserScope.prototype.toObject>[];
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        if (this.scopes != null) {
            data.scopes = this.scopes.map((item: dependency_1.UserScope) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasUser)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (this.scopes.length)
            writer.writeRepeatedMessage(2, this.scopes, (item: dependency_1.UserScope) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetUserResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetUserResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = dependency_1.User.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.scopes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.UserScope.deserialize(reader), dependency_1.UserScope));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetUserResponse {
        return GetUserResponse.deserialize(bytes);
    }
}
