/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.4
 * source: payload/v1/login.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sessionId?: string;
        isAdmin?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sessionId" in data && data.sessionId != undefined) {
                this.sessionId = data.sessionId;
            }
            if ("isAdmin" in data && data.isAdmin != undefined) {
                this.isAdmin = data.isAdmin;
            }
        }
    }
    get sessionId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set sessionId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get isAdmin() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set isAdmin(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        sessionId?: string;
        isAdmin?: boolean;
    }): LoginResponse {
        const message = new LoginResponse({});
        if (data.sessionId != null) {
            message.sessionId = data.sessionId;
        }
        if (data.isAdmin != null) {
            message.isAdmin = data.isAdmin;
        }
        return message;
    }
    toObject() {
        const data: {
            sessionId?: string;
            isAdmin?: boolean;
        } = {};
        if (this.sessionId != null) {
            data.sessionId = this.sessionId;
        }
        if (this.isAdmin != null) {
            data.isAdmin = this.isAdmin;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sessionId.length)
            writer.writeString(1, this.sessionId);
        if (this.isAdmin != false)
            writer.writeBool(2, this.isAdmin);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.sessionId = reader.readString();
                    break;
                case 2:
                    message.isAdmin = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
