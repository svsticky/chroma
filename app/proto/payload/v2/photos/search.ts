/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: payload/v2/photos/search.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../entity/photo";
import * as pb_1 from "google-protobuf";
export class SearchPhotosRequest extends pb_1.Message {
    #one_of_decls: number[][] = [[1]];
    constructor(data?: any[] | ({} & (({
        albumId?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("albumId" in data && data.albumId != undefined) {
                this.albumId = data.albumId;
            }
        }
    }
    get albumId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set albumId(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get hasAlbumId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get _albumId() {
        const cases: {
            [index: number]: "none" | "albumId";
        } = {
            0: "none",
            1: "albumId"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    static fromObject(data: {
        albumId?: string;
    }): SearchPhotosRequest {
        const message = new SearchPhotosRequest({});
        if (data.albumId != null) {
            message.albumId = data.albumId;
        }
        return message;
    }
    toObject() {
        const data: {
            albumId?: string;
        } = {};
        if (this.albumId != null) {
            data.albumId = this.albumId;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasAlbumId)
            writer.writeString(1, this.albumId);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchPhotosRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchPhotosRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.albumId = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchPhotosRequest {
        return SearchPhotosRequest.deserialize(bytes);
    }
}
export class SearchPhotosResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        photos?: dependency_1.Photo[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("photos" in data && data.photos != undefined) {
                this.photos = data.photos;
            }
        }
    }
    get photos() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Photo, 1) as dependency_1.Photo[];
    }
    set photos(value: dependency_1.Photo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        photos?: ReturnType<typeof dependency_1.Photo.prototype.toObject>[];
    }): SearchPhotosResponse {
        const message = new SearchPhotosResponse({});
        if (data.photos != null) {
            message.photos = data.photos.map(item => dependency_1.Photo.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            photos?: ReturnType<typeof dependency_1.Photo.prototype.toObject>[];
        } = {};
        if (this.photos != null) {
            data.photos = this.photos.map((item: dependency_1.Photo) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.photos.length)
            writer.writeRepeatedMessage(1, this.photos, (item: dependency_1.Photo) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SearchPhotosResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SearchPhotosResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.photos, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.Photo.deserialize(reader), dependency_1.Photo));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SearchPhotosResponse {
        return SearchPhotosResponse.deserialize(bytes);
    }
}
