/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.21.12
 * source: entity/album.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./photo";
import * as pb_1 from "google-protobuf";
export enum UserType {
    SERVICE = 0,
    KOALA = 1
}
export class Album extends pb_1.Message {
    #one_of_decls: number[][] = [[1], [2], [3], [4], [5], [6], [7], [8]];
    constructor(data?: any[] | ({} & (({
        id?: string;
    }) | ({
        name?: string;
    }) | ({
        coverPhoto?: dependency_1.Photo;
    }) | ({
        createdAt?: number;
    }) | ({
        createdBy?: AlbumUser;
    }) | ({
        published?: boolean;
    }) | ({
        publishedAt?: number;
    }) | ({
        publishedBy?: AlbumUser;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("coverPhoto" in data && data.coverPhoto != undefined) {
                this.coverPhoto = data.coverPhoto;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("createdBy" in data && data.createdBy != undefined) {
                this.createdBy = data.createdBy;
            }
            if ("published" in data && data.published != undefined) {
                this.published = data.published;
            }
            if ("publishedAt" in data && data.publishedAt != undefined) {
                this.publishedAt = data.publishedAt;
            }
            if ("publishedBy" in data && data.publishedBy != undefined) {
                this.publishedBy = data.publishedBy;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set id(value: string) {
        pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
    }
    get hasId() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[1], value);
    }
    get hasName() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get coverPhoto() {
        return pb_1.Message.getWrapperField(this, dependency_1.Photo, 3) as dependency_1.Photo;
    }
    set coverPhoto(value: dependency_1.Photo) {
        pb_1.Message.setOneofWrapperField(this, 3, this.#one_of_decls[2], value);
    }
    get hasCoverPhoto() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get createdAt() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set createdAt(value: number) {
        pb_1.Message.setOneofField(this, 4, this.#one_of_decls[3], value);
    }
    get hasCreatedAt() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get createdBy() {
        return pb_1.Message.getWrapperField(this, AlbumUser, 5) as AlbumUser;
    }
    set createdBy(value: AlbumUser) {
        pb_1.Message.setOneofWrapperField(this, 5, this.#one_of_decls[4], value);
    }
    get hasCreatedBy() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get published() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set published(value: boolean) {
        pb_1.Message.setOneofField(this, 6, this.#one_of_decls[5], value);
    }
    get hasPublished() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get publishedAt() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set publishedAt(value: number) {
        pb_1.Message.setOneofField(this, 7, this.#one_of_decls[6], value);
    }
    get hasPublishedAt() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get publishedBy() {
        return pb_1.Message.getWrapperField(this, AlbumUser, 8) as AlbumUser;
    }
    set publishedBy(value: AlbumUser) {
        pb_1.Message.setOneofWrapperField(this, 8, this.#one_of_decls[7], value);
    }
    get hasPublishedBy() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get _id() {
        const cases: {
            [index: number]: "none" | "id";
        } = {
            0: "none",
            1: "id"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1])];
    }
    get _name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    get _coverPhoto() {
        const cases: {
            [index: number]: "none" | "coverPhoto";
        } = {
            0: "none",
            3: "coverPhoto"
        };
        return cases[pb_1.Message.computeOneofCase(this, [3])];
    }
    get _createdAt() {
        const cases: {
            [index: number]: "none" | "createdAt";
        } = {
            0: "none",
            4: "createdAt"
        };
        return cases[pb_1.Message.computeOneofCase(this, [4])];
    }
    get _createdBy() {
        const cases: {
            [index: number]: "none" | "createdBy";
        } = {
            0: "none",
            5: "createdBy"
        };
        return cases[pb_1.Message.computeOneofCase(this, [5])];
    }
    get _published() {
        const cases: {
            [index: number]: "none" | "published";
        } = {
            0: "none",
            6: "published"
        };
        return cases[pb_1.Message.computeOneofCase(this, [6])];
    }
    get _publishedAt() {
        const cases: {
            [index: number]: "none" | "publishedAt";
        } = {
            0: "none",
            7: "publishedAt"
        };
        return cases[pb_1.Message.computeOneofCase(this, [7])];
    }
    get _publishedBy() {
        const cases: {
            [index: number]: "none" | "publishedBy";
        } = {
            0: "none",
            8: "publishedBy"
        };
        return cases[pb_1.Message.computeOneofCase(this, [8])];
    }
    static fromObject(data: {
        id?: string;
        name?: string;
        coverPhoto?: ReturnType<typeof dependency_1.Photo.prototype.toObject>;
        createdAt?: number;
        createdBy?: ReturnType<typeof AlbumUser.prototype.toObject>;
        published?: boolean;
        publishedAt?: number;
        publishedBy?: ReturnType<typeof AlbumUser.prototype.toObject>;
    }): Album {
        const message = new Album({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.coverPhoto != null) {
            message.coverPhoto = dependency_1.Photo.fromObject(data.coverPhoto);
        }
        if (data.createdAt != null) {
            message.createdAt = data.createdAt;
        }
        if (data.createdBy != null) {
            message.createdBy = AlbumUser.fromObject(data.createdBy);
        }
        if (data.published != null) {
            message.published = data.published;
        }
        if (data.publishedAt != null) {
            message.publishedAt = data.publishedAt;
        }
        if (data.publishedBy != null) {
            message.publishedBy = AlbumUser.fromObject(data.publishedBy);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: string;
            name?: string;
            coverPhoto?: ReturnType<typeof dependency_1.Photo.prototype.toObject>;
            createdAt?: number;
            createdBy?: ReturnType<typeof AlbumUser.prototype.toObject>;
            published?: boolean;
            publishedAt?: number;
            publishedBy?: ReturnType<typeof AlbumUser.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.coverPhoto != null) {
            data.coverPhoto = this.coverPhoto.toObject();
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt;
        }
        if (this.createdBy != null) {
            data.createdBy = this.createdBy.toObject();
        }
        if (this.published != null) {
            data.published = this.published;
        }
        if (this.publishedAt != null) {
            data.publishedAt = this.publishedAt;
        }
        if (this.publishedBy != null) {
            data.publishedBy = this.publishedBy.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.hasId)
            writer.writeString(1, this.id);
        if (this.hasName)
            writer.writeString(2, this.name);
        if (this.hasCoverPhoto)
            writer.writeMessage(3, this.coverPhoto, () => this.coverPhoto.serialize(writer));
        if (this.hasCreatedAt)
            writer.writeInt64(4, this.createdAt);
        if (this.hasCreatedBy)
            writer.writeMessage(5, this.createdBy, () => this.createdBy.serialize(writer));
        if (this.hasPublished)
            writer.writeBool(6, this.published);
        if (this.hasPublishedAt)
            writer.writeInt64(7, this.publishedAt);
        if (this.hasPublishedBy)
            writer.writeMessage(8, this.publishedBy, () => this.publishedBy.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Album {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Album();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readString();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    reader.readMessage(message.coverPhoto, () => message.coverPhoto = dependency_1.Photo.deserialize(reader));
                    break;
                case 4:
                    message.createdAt = reader.readInt64();
                    break;
                case 5:
                    reader.readMessage(message.createdBy, () => message.createdBy = AlbumUser.deserialize(reader));
                    break;
                case 6:
                    message.published = reader.readBool();
                    break;
                case 7:
                    message.publishedAt = reader.readInt64();
                    break;
                case 8:
                    reader.readMessage(message.publishedBy, () => message.publishedBy = AlbumUser.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Album {
        return Album.deserialize(bytes);
    }
}
export class AlbumUser extends pb_1.Message {
    #one_of_decls: number[][] = [[2]];
    constructor(data?: any[] | ({
        type?: UserType;
        id?: number;
    } & (({
        name?: string;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, UserType.SERVICE) as UserType;
    }
    set type(value: UserType) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setOneofField(this, 2, this.#one_of_decls[0], value);
    }
    get hasName() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get _name() {
        const cases: {
            [index: number]: "none" | "name";
        } = {
            0: "none",
            2: "name"
        };
        return cases[pb_1.Message.computeOneofCase(this, [2])];
    }
    static fromObject(data: {
        type?: UserType;
        name?: string;
        id?: number;
    }): AlbumUser {
        const message = new AlbumUser({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: UserType;
            name?: string;
            id?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != UserType.SERVICE)
            writer.writeEnum(1, this.type);
        if (this.hasName)
            writer.writeString(2, this.name);
        if (this.id != 0)
            writer.writeInt32(3, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AlbumUser {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AlbumUser();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readEnum();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.id = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AlbumUser {
        return AlbumUser.deserialize(bytes);
    }
}
